"""
This type stub file was generated by pyright.
"""

from redis import Redis
from redis.connection import ConnectionPool

class ConnectionFactory:
    _pools: dict[str, ConnectionPool] = ...
    def __init__(self, options) -> None: ...
    def make_connection_params(
        self, url
    ):  # -> dict[str, Any | type[_RESP2Parser] | type[_RESP3Parser] | type[_HiredisParser]]:
        """
        Given a main connection parameters, build a complete
        dict of connection parameters.
        """
        ...

    def connect(self, url: str) -> Redis:
        """
        Given a basic connection parameters,
        return a new connection.
        """
        ...

    def disconnect(self, connection: Redis) -> None:
        """
        Given a not null client connection it disconnect from the Redis server.

        The default implementation uses a pool to hold connections.
        """
        ...

    def get_connection(self, params):  # -> Any:
        """
        Given a now preformatted params, return a
        new connection.

        The default implementation uses a cached pools
        for create new connection.
        """
        ...

    def get_parser_cls(
        self,
    ):  # -> type[_RESP2Parser] | type[_RESP3Parser] | type[_HiredisParser] | Any:
        ...
    def get_or_create_connection_pool(self, params):  # -> ConnectionPool:
        """
        Given a connection parameters and return a new
        or cached connection pool for them.

        Reimplement this method if you want distinct
        connection pool instance caching behavior.
        """
        ...

    def get_connection_pool(self, params):  # -> Any:
        """
        Given a connection parameters, return a new
        connection pool for them.

        Overwrite this method if you want a custom
        behavior on creating connection pool.
        """
        ...

class SentinelConnectionFactory(ConnectionFactory):
    def __init__(self, options) -> None: ...
    def get_connection_pool(self, params):  # -> Any:
        """
        Given a connection parameters, return a new sentinel connection pool
        for them.
        """
        ...

def get_connection_factory(path=..., options=...):  # -> Any:
    ...
